# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      tags:
        description: 'Test scenario tags'
        required: false
        type: string

env:
  AWS_REGION: us-east-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: amrpoc-ecr           # set this to your Amazon ECR repository name
  ECS_SERVICE: webapp-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: amrpoc-ecs-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: web-app           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  create-image:
    name: Create Image
    runs-on: ubuntu-latest
    environment: production

    outputs:
      relative_image: ${{ steps.set-app-name.outputs.relative_image }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set App Name
      id: set-app-name
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
         echo "IMG_NAME=$(echo ${ECR_REGISTRY})/amrpoc-ecr" >> $GITHUB_ENV
         export RELATIVE_IMAGE=$(git rev-parse --short HEAD)$GITHUB_RUN_ID
         echo "relative_image=$RELATIVE_IMAGE" >> $GITHUB_OUTPUT
         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$RELATIVE_IMAGE" >> $GITHUB_OUTPUT

    - name: Pack Remote Build
      uses: dfreilich/pack-action@v2.1.1
      with:
        args: 'build ${{ env.IMG_NAME }} --builder paketobuildpacks/builder-jammy-base --publish -t ${{ steps.set-app-name.outputs.image }}'
  

  trivy:
    name: "Use Trivy to gen sbom and upload to AMR"
    runs-on: ubuntu-latest
    needs: create-image
    environment: production

    steps:
      - id: setup-tools
        uses: buildpacks/github-actions/setup-tools@v5.1.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.create-image.outputs.relative_image }}"
          output: "sbom.cdx.json"
          format: "cyclonedx"


      - name: Upload to AMR
        id: upload-amr
        run: |
          export digest=$(crane digest "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.create-image.outputs.relative_image }}")

          export access_token=$(curl -w'\n' -X POST ${{ env.CSP_URL }}/csp/gateway/am/api/auth/api-tokens/authorize \
            -H "Accept: application/json" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "refresh_token=${{ env.CSP_API_TOKEN }}" | jq ".access_token" -r)
        
          curl -w'\n' -X POST ${{ env.CEH_URL}} \
            -H "Authorization: Bearer ${access_token}" \
            -H "ce-id: ${{ gihub.sha }}" \
            -H "ce-specversion: 1.0" \
            -H "ce-type: vmware.tanzu.apps.scan.sbom.pushed.v1" \
            -H "ce-source: bash-script" \
            -H "ce-batchid: abc1338" \
            -H "ce-sbomname: sbom.cdx.json" \
            -H "ce-project: default" \
            -H "ce-correlationid: unknown" \
            -H "ce-artifactdigest: image:$digest" \
            -H "Content-Type: application/vnd.cyclonedx+json; version=1.5" \
            -d @sbom.cdx.json  -i         


  deploy-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production
    needs: create-image

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.create-image.outputs.relative_image }}"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
